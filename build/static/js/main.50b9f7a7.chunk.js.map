{"version":3,"sources":["Question.js","App.js","index.js"],"names":["Question","props","useState","QstnVal","stateNum","onClick","App","showBoard","setStateNum","showQuestion","setStateVal","questionData","questions","clue","setStateClue","showBoardFunctionI","i","console","log","className","answer","ReactDOM","render","document","getElementById"],"mappings":"k0CAGe,SAASA,EAASC,GAC7B,IADoC,EAETC,mBAASD,EAAME,SAFN,mBAE/BC,EAF+B,UAYpC,OACI,yBAAKC,QAASJ,EAAMI,SAEhB,4BAAKD,I,WC4DFE,MAvEf,WAAgB,IAAD,EACiBJ,mBAAS,SAD1B,mBACNK,EADM,KACIC,EADJ,OAEuBN,mBAAS,gBAFhC,mBAENO,EAFM,KAEQC,EAFR,OAGgBR,mBAASS,EAAaC,UAAU,GAAGC,MAHnD,mBAGNA,EAHM,KAGAC,EAHA,KAaX,SAASC,EAAmBC,GAYxB,OAXuB,WACnBC,QAAQC,IAAIF,GACI,SAAbT,GACCC,EAAYD,EAAU,gBACtBG,EAAYD,EAAa,IACzBK,EAAaH,EAAaC,UAAUI,GAAGH,OACnB,gBAAbN,IACPC,EAAYD,EAAY,SACxBG,EAAYD,EAAe,kBAgB3C,OACI,yBAAKU,UAAU,OACX,0CACA,wBAAIA,UAAaV,EAAcJ,QAbnC,WAEQS,EAAaH,EAAaC,UAAU,GAAGQ,UAW3C,KAAkEP,GAClE,yBAAKM,UAAaZ,GAEd,yBAAKY,UAAU,UACX,kBAACnB,EAAD,CAAUK,QAAWU,EAAmB,GAAIZ,QAAS,IAAMiB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,OACrI,kBAACb,EAAD,CAAUK,QAAWU,EAAmB,GAAIZ,QAAS,IAAKiB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,OACpI,kBAACb,EAAD,CAAUK,QAAWU,EAAmB,GAAIZ,QAAS,IAAKiB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,QAGxI,yBAAKM,UAAU,UACX,kBAACnB,EAAD,CAAUK,QAAWU,EAAmB,GAAIZ,QAAS,IAAKiB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,OACpI,kBAACb,EAAD,CAAUK,QAAWU,EAAmB,GAAIZ,QAAS,IAAKiB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,OACpI,kBAACb,EAAD,CAAUK,QAAWU,EAAmB,GAAIZ,QAAS,IAAKiB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,QAGxI,yBAAKM,UAAU,UACX,kBAACnB,EAAD,CAAUK,QAAWU,EAAmB,GAAIZ,QAAS,IAAKiB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,OACpI,kBAACb,EAAD,CAAUK,QAAWU,EAAmB,GAAIZ,QAAS,IAAKiB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,OACpI,kBAACb,EAAD,CAAUK,QAAWU,EAAmB,GAAIZ,QAAS,IAAKiB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,SAG5I,4BACI,kBAACb,EAAD,CAAUoB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,OACpF,kBAACb,EAAD,CAAUoB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,OACpF,kBAACb,EAAD,CAAUoB,OAAQT,EAAaC,UAAU,GAAGQ,OAAQP,KAAMF,EAAaC,UAAU,GAAGC,UCpEhGQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.50b9f7a7.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport { fuchsia } from 'color-name';\n\nexport default function Question(props) {\n    let QstnVal;\n    let [stateNum,setStateNum]=useState(props.QstnVal);\n    function showClue(){\n        setStateNum(stateNum = props.clue); \n    }\n    // function showAnswer(){\n    //     if (stateNum == props.clue){\n    //         stateNum = props.answer\n    //     }\n    // }\n\n    return(\n        <div onClick={props.onClick}>\n            {/* <p>{props.clue}</p> */}\n            <h1>{stateNum}</h1>\n        </div>\n    );\n}","import React,{useState} from 'react';\nimport './App.css';\nimport Question from './Question.js';\nimport questionData from './question-data.json';\nimport { fuchsia } from 'color-name';\n\n\nfunction App() {\n    let [showBoard,setStateNum]=useState(\"board\");\n    let [showQuestion, setStateVal] = useState(\"board hidden\")\n    let [clue, setStateClue] = useState(questionData.questions[0].clue)\n    function showBoardFunction(){\n        if(showBoard == \"board\") {\n            setStateNum(showBoard=\"board hidden\")\n            setStateVal(showQuestion=\"board\")\n        } else if (showBoard == \"board hidden\"){\n            setStateNum(showBoard = \"board\")\n            setStateVal(showQuestion = \"board hidden\")\n        }\n    }\n    function showBoardFunctionI(i) {\n        let showBoardFunction= function() {\n            console.log(i)\n            if(showBoard == \"board\") {\n                setStateNum(showBoard=\"board hidden\")\n                setStateVal(showQuestion=\"\")\n                setStateClue(questionData.questions[i].clue)\n            } else if (showBoard == \"board hidden\"){\n                setStateNum(showBoard = \"board\")\n                setStateVal(showQuestion = \"board hidden\")\n            }\n        }\n        return showBoardFunction\n    }\n\n    function showBoardFunctionII(){\n        // if(setStateClue() == questionData.questions[2].clue){\n            setStateClue(questionData.questions[1].answer)\n        \n        \n    }\n\n    \n    \n\nreturn (\n    <div className=\"App\">\n        <h1> Jeopardy </h1>\n        <h1 className = {showQuestion} onClick = {showBoardFunctionII}>  {clue}</h1>\n        <div className = {showBoard} >\n            {/* Column - 1 (HISTORY) */}\n            <div className=\"column\">\n                <Question onClick = {showBoardFunctionI(0)} QstnVal={100}  answer={questionData.questions[0].answer} clue={questionData.questions[0].clue}/>\n                <Question onClick = {showBoardFunctionI(1)} QstnVal={200} answer={questionData.questions[1].answer} clue={questionData.questions[1].clue}/>\n                <Question onClick = {showBoardFunctionI(2)} QstnVal={300} answer={questionData.questions[2].answer} clue={questionData.questions[2].clue}/>\n            </div>\n            {/* Column - 2 (SPORTS) */}\n            <div className=\"column\">\n                <Question onClick = {showBoardFunctionI(3)} QstnVal={100} answer={questionData.questions[3].answer} clue={questionData.questions[3].clue}/>\n                <Question onClick = {showBoardFunctionI(4)} QstnVal={200} answer={questionData.questions[4].answer} clue={questionData.questions[4].clue}/>\n                <Question onClick = {showBoardFunctionI(5)} QstnVal={300} answer={questionData.questions[5].answer} clue={questionData.questions[5].clue}/>\n            </div>\n            {/* Column - 3 (TECH) */}\n            <div className=\"column\" >\n                <Question onClick = {showBoardFunctionI(6)} QstnVal={100} answer={questionData.questions[6].answer} clue={questionData.questions[6].clue}/>\n                <Question onClick = {showBoardFunctionI(7)} QstnVal={200} answer={questionData.questions[7].answer} clue={questionData.questions[7].clue}/>\n                <Question onClick = {showBoardFunctionI(8)} QstnVal={300} answer={questionData.questions[8].answer} clue={questionData.questions[8].clue}/>\n            </div>\n        </div>\n        <h1> \n            <Question answer={questionData.questions[0].answer} clue={questionData.questions[0].clue}/>\n            <Question answer={questionData.questions[4].answer} clue={questionData.questions[4].clue}/>\n            <Question answer={questionData.questions[8].answer} clue={questionData.questions[8].clue}/>\n        </h1>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}