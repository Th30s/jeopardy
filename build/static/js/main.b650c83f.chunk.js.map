{"version":3,"sources":["Question.js","App.js","index.js"],"names":["Question","props","useState","QstnVal","onClick","App","onehundred","setOneHundred","showBoard","setStateNum","showQuestion","setStateVal","questionData","questions","clue","setStateClue","questionNum","setNewNum","answerShown","setNewBoard","showBoardFunctionI","i","console","log","className","answer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b650c83f.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport { fuchsia } from 'color-name';\n\nexport default function Question(props) {\n    let [stateNum,setStateNum]=useState(props.QstnVal);\n    \n    // function showAnswer(){\n    //     if (stateNum == props.clue){\n    //         stateNum = props.answer\n    //     }\n    // }\n\n    return(\n        <div onClick={props.onClick}>\n            {/* <p>{props.clue}</p> */}\n            <h1>{props.QstnVal}</h1>\n        </div>\n    );\n}","import React,{useState} from 'react';\nimport './App.css';\nimport Question from './Question.js';\nimport questionData from './question-data.json';\nimport { fuchsia } from 'color-name';\nimport { conditionalExpression } from '@babel/types';\n\n\nfunction App() {\n    let [onehundred, setOneHundred] = useState(100)\n    let twohundred = 200\n    let threehundred = 300\n    let [showBoard,setStateNum]=useState(\"board\");\n    let [showQuestion, setStateVal] = useState(\"board hidden\")\n    let [clue, setStateClue] = useState(questionData.questions[0].clue)\n    let [questionNum, setNewNum] = useState(\"\")\n    let [answerShown, setNewBoard] = useState(\"no\")\n    // function showBoardFunction(){\n    //     if(showBoard == \"board\") {\n    //         setStateNum(showBoard=\"board hidden\")\n    //         setStateVal(showQuestion=\"board\")\n    //     } else if (showBoard == \"board hidden\"){\n    //         setStateNum(showBoard = \"board\")\n    //         setStateVal(showQuestion = \"board hidden\")\n    //     }\n    // }\n\n    function showBoardFunctionI(i) {\n        let showBoardFunction= function() {\n            console.log(i)\n            if(showBoard == \"board\") {\n                setStateNum(showBoard=\"board hidden\")\n                setStateVal(showQuestion=\"\")\n                setStateClue(questionData.questions[i].clue)\n                setNewNum(questionNum = i)\n            } else if (showBoard == \"board hidden\"){\n                setStateNum(showBoard = \"board\")\n                setStateVal(showQuestion = \"board hidden\")\n            }\n        }\n        return showBoardFunction\n    }\n\n    function showBoardFunctionII(){\n        if(answerShown === \"no\"){\n            setStateClue(questionData.questions[questionNum].answer)\n            setNewBoard(answerShown = \"yes\")\n        }else if(answerShown === \"yes\"){\n                setStateNum(showBoard = \"board\")\n                setStateVal(showQuestion = \"board hidden\")\n                setNewBoard(answerShown = \"no\")\n                console.log(\"hello\")\n                setOneHundred(\" \")\n        }\n    }\n\nreturn (\n    <div className=\"App\">\n        <h1> Jeopardy </h1>\n        <h1 className = {showQuestion} onClick = {showBoardFunctionII}>  {clue}</h1>\n        <div className = {showBoard} >\n            {/* Column - 1 (HISTORY) */}\n            <div className=\"column\">\n                <Question onClick = {showBoardFunctionI(0)} QstnVal={onehundred}  answer={questionData.questions[0].answer} clue={questionData.questions[0].clue}/>\n                <Question onClick = {showBoardFunctionI(1)} QstnVal={twohundred} answer={questionData.questions[1].answer} clue={questionData.questions[1].clue}/>\n                <Question onClick = {showBoardFunctionI(2)} QstnVal={threehundred} answer={questionData.questions[2].answer} clue={questionData.questions[2].clue}/>\n            </div>\n            {/* Column - 2 (SPORTS) */}\n            <div className=\"column\">\n                <Question onClick = {showBoardFunctionI(3)} QstnVal={onehundred} answer={questionData.questions[3].answer} clue={questionData.questions[3].clue}/>\n                <Question onClick = {showBoardFunctionI(4)} QstnVal={twohundred} answer={questionData.questions[4].answer} clue={questionData.questions[4].clue}/>\n                <Question onClick = {showBoardFunctionI(5)} QstnVal={threehundred} answer={questionData.questions[5].answer} clue={questionData.questions[5].clue}/>\n            </div>\n            {/* Column - 3 (TECH) */}\n            <div className=\"column\" >\n                <Question onClick = {showBoardFunctionI(6)} QstnVal={onehundred} answer={questionData.questions[6].answer} clue={questionData.questions[6].clue}/>\n                <Question onClick = {showBoardFunctionI(7)} QstnVal={twohundred} answer={questionData.questions[7].answer} clue={questionData.questions[7].clue}/>\n                <Question onClick = {showBoardFunctionI(8)} QstnVal={threehundred} answer={questionData.questions[8].answer} clue={questionData.questions[8].clue}/>\n            </div>\n        </div>\n        <h1> \n            <Question answer={questionData.questions[0].answer} clue={questionData.questions[0].clue}/>\n            <Question answer={questionData.questions[4].answer} clue={questionData.questions[4].clue}/>\n            <Question answer={questionData.questions[8].answer} clue={questionData.questions[8].clue}/>\n        </h1>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}